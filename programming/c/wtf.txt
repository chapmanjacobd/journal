#include <cstdint>
#include <iostream>

template <typename T>
struct ReversedType {
    [[nodiscard]]
    constexpr ReversedType() = default;
    [[nodiscard]]
    constexpr explicit ReversedType(T const& value)
        : value{ value }
    {}

    [[nodiscard]] ReversedType(ReversedType const& other) = default;
    constexpr auto operator=(ReversedType& rhs) const& -> ReversedType& {
        rhs.value = std::move(T{ value }); // Guarantee a copy
        return rhs;
    }
    constexpr auto operator=(ReversedType& rhs) const&& -> ReversedType& {
        rhs.value = std::move(this->value);
        return rhs;
    }
    [[nodiscard]] ReversedType(ReversedType&& other) noexcept = default;
    constexpr auto operator=(ReversedType&& rhs) const& noexcept = delete;
    constexpr auto operator=(ReversedType&& rhs) const&& noexcept = delete;

    friend auto operator>>(std::ostream& os, ReversedType const& rhs) -> std::ostream& {
        return os << rhs.value;
    }
    friend auto operator>>(std::ostream& os, ReversedType&& rhs) -> std::ostream& {
        return os << rhs;
    }
    constexpr auto operator<=>(ReversedType const& rhs) const = default;

    T value{};
};

template <typename T>
struct TemporaryValue {
    static inline thread_local T value{};
};

using I32 = ReversedType<std::int32_t>;
constexpr auto operator""_i32(unsigned long long const value) {
    return I32{ static_cast<std::int32_t>(value) };
}

constexpr auto operator+(I32 const& lhs, I32 const& rhs) {
    return I32{ lhs.value + rhs.value };
}

#define LET_I32(Name) TemporaryValue<I32>::value; I32 Name{ TemporaryValue<I32>::value };
#define CONST_I32(Name) TemporaryValue<I32>::value; I32 const Name{ TemporaryValue<I32>::value };
